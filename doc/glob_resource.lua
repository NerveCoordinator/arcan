-- glob_resource
-- @short: Search the different datastores for resources matching a pattern.
-- @inargs: string:pattern
-- @inargs: string:pattern, int:namespace
-- @outargs: itable:string
-- @longdescr:
-- Resources are grouped into a number of disjunct 'namespaces'. These are
-- directory trees that can be controlled by the user directly or indirectly
-- via environment variables, command line arguments and database settings.
-- They are also partly generated by the engine at startup or application
-- switching time. This is done to encourage stronger separation and typing
-- of resources to improve security, privacy and safety.
--
-- This function takes a POSIX glob.3 friendly pattern string and searches
-- the namespace(s) referenced by the *namespace* argument, or a compile time
-- defined default set if no such argument is provided. The default is likely
-- to be APPL | SHARED | APPL_TEMP.
--
-- Valid constants for domain (bitmap so they can be bit.or:ed together) are:
-- APPL_RESOURCE(rx, appl specific resource, static default)
-- APPL_TEMP_RESOURCE(rwx, appl specific resource, dynamically generated contents)
-- SHARED_RESOURCE(r, user shared resource set)
-- SYS_APPL_RESOURCE(r, other appls (used with ref:system_collapse)
-- SYS_FONT_RESOURCE(r, namespace for font files used with ref:render_text)
-- APPL_STATE_RESOURCE(rw, client state store/restore pool)
-- SYS_SCRIPT_RESOURCE(r, global built-in scripts that can be shared between appls)
-- @note: The results contain only filename and, possibly, extension.
-- @note: The scan is shallow, so complex recurse patterns like /*/a* will not work.
-- @group: resource
-- @cfunction: globresource
-- @related: resource, system_collapse
-- @flags:
function main()
#ifdef MAIN
	local tbl = glob_resource("*");
	for i,v in ipairs(tbl) do
		print(v);
	end
#endif

#ifdef MAIN2
	local tbl = glob_resource("*", SYS_APPL_RESOURCE);
	for i,v in ipairs(tbl) do
		print(v);
	end
#endif

#ifdef ERROR
	local tbl = glob_resource(0);
	if (type(tbl) ~= "table") then
		abort();
	end
#endif
end
